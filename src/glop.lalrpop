use std::str::FromStr;
use ast::{Match, Condition, CmpOpcode, Action};

grammar;

pub Glop = Semicolon<Match>;

Semicolon<T>: Vec<T> = {
	<v:(<T> ";")*> <e:T?> => match e {
		None => v,
		Some(e) => {
			let mut v = v;
			v.push(e);
			v
		}
	}
};

Comma<T>: Vec<T> = {
	<v:(<T> ",")*> <e:T?> => match e {
		None => v,
		Some(e) => {
			let mut v = v;
			v.push(e);
			v
		}
	}
};

Match: Box<Match> = {
	"match" "(" <c:Conditions> ")" "{" <a:Actions> "}" => Box::new(Match{ conditions: c, actions: a }),
};

Conditions = Comma<Condition>;

Condition: Box<Condition> = {
	Identifier CmpOp QString => Box::new(Condition::Cmp(<>)),
	UnaryFunction,
};

Identifier = r"[a-z][a-z0-9_]+";

QString: String = {
	<v:r##"[^"]+"##> => String::from(v),
};

CmpOp: CmpOpcode = {
	"==" => CmpOpcode::Equal,
	"!=" => CmpOpcode::NotEqual,
};

UnaryFunction: Box<Condition> = {
	"message" <k:Identifier> => Box::new(Condition::Message(k)),
	"isset" <k:Identifier> => Box::new(Condition::IsSet(k)),
};

Actions = Semicolon<Action>;

Action: Box<Action> = {
	"set" <k:Identifier> <v:QString> => Box::new(Action::SetVar(k, v)),
	"unset" <k:Identifier> => Box::new(Action::UnsetVar(k)),
	"acknowledge" => Box::new(Action::Acknowledge),
	"shell" QString => Box::new(Action::Shell(v)),
};
