use ast::*;

#[pub]
glop -> Box<Glop>
	= __ ms:matches __ { let mut ms = ms; ms.reverse(); Box::new(Glop{ matches: ms }) }

matches -> Vec<Box<Match>>
    = m:match __ ms:matches { let mut ms = ms; ms.push(m); ms }
    / m:match { vec![m] }

match -> Box<Match>
    = "match" __ "(" __ c:conditions __ ")" __ "{" __ a:actions __ "}" { Box::new(Match{ conditions: c, actions: a }) }

conditions -> Vec<Box<Condition>>
    = c:condition __ "," __ cs:conditions { let mut cs = cs; cs.push(c); cs }
    / c:condition { vec![c] }

condition -> Box<Condition>
    = k:identifier __ op:cmpop __ v:value { Box::new(Condition::Cmp(k, op, v)) }
    / unaryfunc

identifier -> String
    = v:$([a-z][a-z0-9_]+) { String::from(v) }

value -> String
    = v:$([A-Za-z0-9_]+) { String::from(v) }
    / "\"" v:$([^"]+) "\"" { String::from(v) }

unaryfunc -> Box<Condition>
    = "message" __ k:identifier { Box::new(Condition::Message(k)) }
    / "is_set" __ k:identifier { Box::new(Condition::IsSet(k)) }

cmpop -> CmpOpcode
    = "==" { CmpOpcode::Equal }
    / "!=" { CmpOpcode::NotEqual }

actions -> Vec<Box<Action>>
    = n:action __ ns:actions { let mut ns = ns; ns.push(n); ns }
    / n:action { vec![n] }

action -> Box<Action>
    = "set" __ k:identifier __ v:value __ ";" { Box::new(Action::SetVar(k, v)) }
    / "unset" __ k:identifier __ ";" { Box::new(Action::UnsetVar(k)) }
    / "acknowledge" __ k:identifier __ ";" { Box::new(Action::Acknowledge(k)) }
    / "exec" __ v:value __ ";" { Box::new(Action::Exec(v)) }

/* The following is borrowed from rust-peg's own grammar */

__ = (whitespace / eol / comment)*

/* Modeled after ECMA-262, 5th ed., 7.4. */
comment
  = singleLineComment
  / multiLineComment

singleLineComment
  = "//" (!eolChar .)*

multiLineComment
  = "/*" (!"*/" .)* "*/"

/* Modeled after ECMA-262, 5th ed., 7.3. */
eol
  = "\n"
  / "\r\n"
  / "\r"
  / "\u{2028}"
  / "\u{2029}"

eolChar
  = [\n\r\u{2028}\u{2029}]

/* Modeled after ECMA-262, 5th ed., 7.2. */
whitespace
  = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}] // \v\f removed

